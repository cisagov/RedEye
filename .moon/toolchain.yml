# https://moonrepo.dev/docs/config/toolchain
$schema: 'https://moonrepo.dev/schemas/toolchain.json'

# Extend and inherit an external configuration file. Must be a valid HTTPS URL or file system path.
# extends: './shared/toolchain.yml'

# Configures Node.js within the toolchain. moon manages its own version of Node.js
# instead of relying on a version found on the host machine. This ensures deterministic
# and reproducible builds across any machine.
node:
  # The version to use. Must be a semantic version that includes major, minor, and patch.
  # We suggest using the latest active LTS version: https://nodejs.org/en/about/releases
  version: '18.16.1'

  # The package manager to use when managing dependencies.
  # Accepts "npm" (default), "pnpm", or "yarn".
  packageManager: 'yarn'

  # The version of the package manager (above) to use.
  yarn:
    version: '3.5.1'

  # Add `node.version` as a constraint in the root `package.json` `engines`.
  addEnginesConstraint: true

  # Use the `package.json` name as an alias for the respective moon project.
  aliasPackageNames: 'name-and-scope'

  # Dedupe dependencies after the lockfile has changed.
  dedupeOnLockfileChange: true

  # Version format to use when syncing dependencies within the project's `package.json`.
  # dependencyVersionFormat: 'workspace'

  # Infer and automatically create moon tasks from `package.json` scripts, per project.
  # BEWARE: Tasks and scripts are not 1:1 in functionality, so please refer to the documentation.
  inferTasksFromScripts: false

  # Sync a project's `dependsOn` as dependencies within the project's `package.json`.
  syncProjectWorkspaceDependencies: true

  # Sync `node.version` to a 3rd-party version manager's config file.
  # Accepts "nodenv" (.node-version), "nvm" (.nvmrc), or none.
  syncVersionManagerConfig: 'nvm'

# Configures how moon integrates with TypeScript.
typescript:
  # When `syncProjectReferences` is enabled and a dependent project reference
  # *does not* have a `tsconfig.json`, automatically create one.
  createMissingConfig: false

  # Name of `tsconfig.json` file in each project root.
  # projectConfigFileName: 'tsconfig.json'

  # Name of `tsconfig.json` file in the workspace root.
  # rootConfigFileName: 'tsconfig.json'

  # Name of the config file in the workspace root that defines shared compiler
  # options for all project reference based config files.
  # rootOptionsConfigFileName: 'tsconfig.options.json'

  # Update a project's `tsconfig.json` to route the `outDir` compiler option
  # to moon's `.moon/cache` directory.
  routeOutDirToCache: false

  # Sync a project's `dependsOn` as project references within the
  # project's `tsconfig.json` and the workspace root `tsconfig.json`.
  syncProjectReferences: true

  # Sync a project's project references as import aliases to the `paths`
  # compiler option in each applicable project.
  syncProjectReferencesToPaths: true
